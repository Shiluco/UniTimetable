// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Shiluco/UniTimetable/backend/ent/department"
	"github.com/Shiluco/UniTimetable/backend/ent/major"
	"github.com/Shiluco/UniTimetable/backend/ent/post"
	"github.com/Shiluco/UniTimetable/backend/ent/schedule"
	"github.com/Shiluco/UniTimetable/backend/ent/schema"
	"github.com/Shiluco/UniTimetable/backend/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	departmentFields := schema.Department{}.Fields()
	_ = departmentFields
	// departmentDescName is the schema descriptor for name field.
	departmentDescName := departmentFields[1].Descriptor()
	// department.NameValidator is a validator for the "name" field. It is called by the builders before save.
	department.NameValidator = departmentDescName.Validators[0].(func(string) error)
	majorFields := schema.Major{}.Fields()
	_ = majorFields
	// majorDescName is the schema descriptor for name field.
	majorDescName := majorFields[2].Descriptor()
	// major.NameValidator is a validator for the "name" field. It is called by the builders before save.
	major.NameValidator = majorDescName.Validators[0].(func(string) error)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescContent is the schema descriptor for content field.
	postDescContent := postFields[3].Descriptor()
	// post.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	post.ContentValidator = postDescContent.Validators[0].(func(string) error)
	// postDescCreatedAt is the schema descriptor for created_at field.
	postDescCreatedAt := postFields[5].Descriptor()
	// post.DefaultCreatedAt holds the default value on creation for the created_at field.
	post.DefaultCreatedAt = postDescCreatedAt.Default.(func() time.Time)
	// postDescUpdatedAt is the schema descriptor for updated_at field.
	postDescUpdatedAt := postFields[6].Descriptor()
	// post.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	post.DefaultUpdatedAt = postDescUpdatedAt.Default.(func() time.Time)
	// post.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	post.UpdateDefaultUpdatedAt = postDescUpdatedAt.UpdateDefault.(func() time.Time)
	scheduleFields := schema.Schedule{}.Fields()
	_ = scheduleFields
	// scheduleDescDayOfWeek is the schema descriptor for day_of_week field.
	scheduleDescDayOfWeek := scheduleFields[2].Descriptor()
	// schedule.DayOfWeekValidator is a validator for the "day_of_week" field. It is called by the builders before save.
	schedule.DayOfWeekValidator = func() func(int8) error {
		validators := scheduleDescDayOfWeek.Validators
		fns := [...]func(int8) error{
			validators[0].(func(int8) error),
			validators[1].(func(int8) error),
		}
		return func(day_of_week int8) error {
			for _, fn := range fns {
				if err := fn(day_of_week); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// scheduleDescTimeSlot is the schema descriptor for time_slot field.
	scheduleDescTimeSlot := scheduleFields[3].Descriptor()
	// schedule.TimeSlotValidator is a validator for the "time_slot" field. It is called by the builders before save.
	schedule.TimeSlotValidator = func() func(int8) error {
		validators := scheduleDescTimeSlot.Validators
		fns := [...]func(int8) error{
			validators[0].(func(int8) error),
			validators[1].(func(int8) error),
		}
		return func(time_slot int8) error {
			for _, fn := range fns {
				if err := fn(time_slot); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// scheduleDescSubject is the schema descriptor for subject field.
	scheduleDescSubject := scheduleFields[4].Descriptor()
	// schedule.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	schedule.SubjectValidator = scheduleDescSubject.Validators[0].(func(string) error)
	// scheduleDescCreatedAt is the schema descriptor for created_at field.
	scheduleDescCreatedAt := scheduleFields[6].Descriptor()
	// schedule.DefaultCreatedAt holds the default value on creation for the created_at field.
	schedule.DefaultCreatedAt = scheduleDescCreatedAt.Default.(func() time.Time)
	// scheduleDescUpdatedAt is the schema descriptor for updated_at field.
	scheduleDescUpdatedAt := scheduleFields[7].Descriptor()
	// schedule.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	schedule.DefaultUpdatedAt = scheduleDescUpdatedAt.Default.(func() time.Time)
	// schedule.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	schedule.UpdateDefaultUpdatedAt = scheduleDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescGrade is the schema descriptor for grade field.
	userDescGrade := userFields[7].Descriptor()
	// user.GradeValidator is a validator for the "grade" field. It is called by the builders before save.
	user.GradeValidator = func() func(int8) error {
		validators := userDescGrade.Validators
		fns := [...]func(int8) error{
			validators[0].(func(int8) error),
			validators[1].(func(int8) error),
		}
		return func(grade int8) error {
			for _, fn := range fns {
				if err := fn(grade); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[8].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[9].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
