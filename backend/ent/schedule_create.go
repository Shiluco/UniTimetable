// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Shiluco/UniTimetable/backend/ent/post"
	"github.com/Shiluco/UniTimetable/backend/ent/schedule"
	"github.com/Shiluco/UniTimetable/backend/ent/user"
)

// ScheduleCreate is the builder for creating a Schedule entity.
type ScheduleCreate struct {
	config
	mutation *ScheduleMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *ScheduleCreate) SetUserID(i int) *ScheduleCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetDayOfWeek sets the "day_of_week" field.
func (sc *ScheduleCreate) SetDayOfWeek(i int) *ScheduleCreate {
	sc.mutation.SetDayOfWeek(i)
	return sc
}

// SetTimeSlot sets the "time_slot" field.
func (sc *ScheduleCreate) SetTimeSlot(i int) *ScheduleCreate {
	sc.mutation.SetTimeSlot(i)
	return sc
}

// SetSubject sets the "subject" field.
func (sc *ScheduleCreate) SetSubject(s string) *ScheduleCreate {
	sc.mutation.SetSubject(s)
	return sc
}

// SetLocation sets the "location" field.
func (sc *ScheduleCreate) SetLocation(s string) *ScheduleCreate {
	sc.mutation.SetLocation(s)
	return sc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableLocation(s *string) *ScheduleCreate {
	if s != nil {
		sc.SetLocation(*s)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScheduleCreate) SetCreatedAt(t time.Time) *ScheduleCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableCreatedAt(t *time.Time) *ScheduleCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScheduleCreate) SetUpdatedAt(t time.Time) *ScheduleCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableUpdatedAt(t *time.Time) *ScheduleCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScheduleCreate) SetID(i int) *ScheduleCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *ScheduleCreate) SetUser(u *User) *ScheduleCreate {
	return sc.SetUserID(u.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (sc *ScheduleCreate) AddPostIDs(ids ...int) *ScheduleCreate {
	sc.mutation.AddPostIDs(ids...)
	return sc
}

// AddPosts adds the "posts" edges to the Post entity.
func (sc *ScheduleCreate) AddPosts(p ...*Post) *ScheduleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPostIDs(ids...)
}

// Mutation returns the ScheduleMutation object of the builder.
func (sc *ScheduleCreate) Mutation() *ScheduleMutation {
	return sc.mutation
}

// Save creates the Schedule in the database.
func (sc *ScheduleCreate) Save(ctx context.Context) (*Schedule, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScheduleCreate) SaveX(ctx context.Context) *Schedule {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScheduleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScheduleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScheduleCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := schedule.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := schedule.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScheduleCreate) check() error {
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Schedule.user_id"`)}
	}
	if _, ok := sc.mutation.DayOfWeek(); !ok {
		return &ValidationError{Name: "day_of_week", err: errors.New(`ent: missing required field "Schedule.day_of_week"`)}
	}
	if v, ok := sc.mutation.DayOfWeek(); ok {
		if err := schedule.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "Schedule.day_of_week": %w`, err)}
		}
	}
	if _, ok := sc.mutation.TimeSlot(); !ok {
		return &ValidationError{Name: "time_slot", err: errors.New(`ent: missing required field "Schedule.time_slot"`)}
	}
	if v, ok := sc.mutation.TimeSlot(); ok {
		if err := schedule.TimeSlotValidator(v); err != nil {
			return &ValidationError{Name: "time_slot", err: fmt.Errorf(`ent: validator failed for field "Schedule.time_slot": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "Schedule.subject"`)}
	}
	if v, ok := sc.mutation.Subject(); ok {
		if err := schedule.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Schedule.subject": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Schedule.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Schedule.updated_at"`)}
	}
	if len(sc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Schedule.user"`)}
	}
	return nil
}

func (sc *ScheduleCreate) sqlSave(ctx context.Context) (*Schedule, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScheduleCreate) createSpec() (*Schedule, *sqlgraph.CreateSpec) {
	var (
		_node = &Schedule{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(schedule.Table, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.DayOfWeek(); ok {
		_spec.SetField(schedule.FieldDayOfWeek, field.TypeInt, value)
		_node.DayOfWeek = value
	}
	if value, ok := sc.mutation.TimeSlot(); ok {
		_spec.SetField(schedule.FieldTimeSlot, field.TypeInt, value)
		_node.TimeSlot = value
	}
	if value, ok := sc.mutation.Subject(); ok {
		_spec.SetField(schedule.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := sc.mutation.Location(); ok {
		_spec.SetField(schedule.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(schedule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(schedule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.UserTable,
			Columns: []string{schedule.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.PostsTable,
			Columns: []string{schedule.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheduleCreateBulk is the builder for creating many Schedule entities in bulk.
type ScheduleCreateBulk struct {
	config
	err      error
	builders []*ScheduleCreate
}

// Save creates the Schedule entities in the database.
func (scb *ScheduleCreateBulk) Save(ctx context.Context) ([]*Schedule, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Schedule, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScheduleCreateBulk) SaveX(ctx context.Context) []*Schedule {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
