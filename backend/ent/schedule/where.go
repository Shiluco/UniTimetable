// Code generated by ent, DO NOT EDIT.

package schedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Shiluco/UniTimetable/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldUserID, v))
}

// DayOfWeek applies equality check predicate on the "day_of_week" field. It's identical to DayOfWeekEQ.
func DayOfWeek(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDayOfWeek, v))
}

// TimeSlot applies equality check predicate on the "time_slot" field. It's identical to TimeSlotEQ.
func TimeSlot(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldTimeSlot, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldSubject, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldLocation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldUserID, vs...))
}

// DayOfWeekEQ applies the EQ predicate on the "day_of_week" field.
func DayOfWeekEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldDayOfWeek, v))
}

// DayOfWeekNEQ applies the NEQ predicate on the "day_of_week" field.
func DayOfWeekNEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldDayOfWeek, v))
}

// DayOfWeekIn applies the In predicate on the "day_of_week" field.
func DayOfWeekIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldDayOfWeek, vs...))
}

// DayOfWeekNotIn applies the NotIn predicate on the "day_of_week" field.
func DayOfWeekNotIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldDayOfWeek, vs...))
}

// DayOfWeekGT applies the GT predicate on the "day_of_week" field.
func DayOfWeekGT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldDayOfWeek, v))
}

// DayOfWeekGTE applies the GTE predicate on the "day_of_week" field.
func DayOfWeekGTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldDayOfWeek, v))
}

// DayOfWeekLT applies the LT predicate on the "day_of_week" field.
func DayOfWeekLT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldDayOfWeek, v))
}

// DayOfWeekLTE applies the LTE predicate on the "day_of_week" field.
func DayOfWeekLTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldDayOfWeek, v))
}

// TimeSlotEQ applies the EQ predicate on the "time_slot" field.
func TimeSlotEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldTimeSlot, v))
}

// TimeSlotNEQ applies the NEQ predicate on the "time_slot" field.
func TimeSlotNEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldTimeSlot, v))
}

// TimeSlotIn applies the In predicate on the "time_slot" field.
func TimeSlotIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldTimeSlot, vs...))
}

// TimeSlotNotIn applies the NotIn predicate on the "time_slot" field.
func TimeSlotNotIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldTimeSlot, vs...))
}

// TimeSlotGT applies the GT predicate on the "time_slot" field.
func TimeSlotGT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldTimeSlot, v))
}

// TimeSlotGTE applies the GTE predicate on the "time_slot" field.
func TimeSlotGTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldTimeSlot, v))
}

// TimeSlotLT applies the LT predicate on the "time_slot" field.
func TimeSlotLT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldTimeSlot, v))
}

// TimeSlotLTE applies the LTE predicate on the "time_slot" field.
func TimeSlotLTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldTimeSlot, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldSubject, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Schedule {
	return predicate.Schedule(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldLocation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PostTable, PostPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.NotPredicates(p))
}
