// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Shiluco/UniTimetable/backend/ent/post"
	"github.com/Shiluco/UniTimetable/backend/ent/predicate"
	"github.com/Shiluco/UniTimetable/backend/ent/schedule"
)

// ScheduleUpdate is the builder for updating Schedule entities.
type ScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleMutation
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (su *ScheduleUpdate) Where(ps ...predicate.Schedule) *ScheduleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetPostID sets the "post_id" field.
func (su *ScheduleUpdate) SetPostID(i int) *ScheduleUpdate {
	su.mutation.SetPostID(i)
	return su
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillablePostID(i *int) *ScheduleUpdate {
	if i != nil {
		su.SetPostID(*i)
	}
	return su
}

// SetDayOfWeek sets the "day_of_week" field.
func (su *ScheduleUpdate) SetDayOfWeek(i int) *ScheduleUpdate {
	su.mutation.ResetDayOfWeek()
	su.mutation.SetDayOfWeek(i)
	return su
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDayOfWeek(i *int) *ScheduleUpdate {
	if i != nil {
		su.SetDayOfWeek(*i)
	}
	return su
}

// AddDayOfWeek adds i to the "day_of_week" field.
func (su *ScheduleUpdate) AddDayOfWeek(i int) *ScheduleUpdate {
	su.mutation.AddDayOfWeek(i)
	return su
}

// SetTimeSlot sets the "time_slot" field.
func (su *ScheduleUpdate) SetTimeSlot(i int) *ScheduleUpdate {
	su.mutation.ResetTimeSlot()
	su.mutation.SetTimeSlot(i)
	return su
}

// SetNillableTimeSlot sets the "time_slot" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableTimeSlot(i *int) *ScheduleUpdate {
	if i != nil {
		su.SetTimeSlot(*i)
	}
	return su
}

// AddTimeSlot adds i to the "time_slot" field.
func (su *ScheduleUpdate) AddTimeSlot(i int) *ScheduleUpdate {
	su.mutation.AddTimeSlot(i)
	return su
}

// SetSubject sets the "subject" field.
func (su *ScheduleUpdate) SetSubject(s string) *ScheduleUpdate {
	su.mutation.SetSubject(s)
	return su
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableSubject(s *string) *ScheduleUpdate {
	if s != nil {
		su.SetSubject(*s)
	}
	return su
}

// SetLocation sets the "location" field.
func (su *ScheduleUpdate) SetLocation(s string) *ScheduleUpdate {
	su.mutation.SetLocation(s)
	return su
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableLocation(s *string) *ScheduleUpdate {
	if s != nil {
		su.SetLocation(*s)
	}
	return su
}

// ClearLocation clears the value of the "location" field.
func (su *ScheduleUpdate) ClearLocation() *ScheduleUpdate {
	su.mutation.ClearLocation()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScheduleUpdate) SetUpdatedAt(t time.Time) *ScheduleUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetPost sets the "post" edge to the Post entity.
func (su *ScheduleUpdate) SetPost(p *Post) *ScheduleUpdate {
	return su.SetPostID(p.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (su *ScheduleUpdate) Mutation() *ScheduleMutation {
	return su.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (su *ScheduleUpdate) ClearPost() *ScheduleUpdate {
	su.mutation.ClearPost()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScheduleUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScheduleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScheduleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScheduleUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := schedule.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ScheduleUpdate) check() error {
	if v, ok := su.mutation.DayOfWeek(); ok {
		if err := schedule.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "Schedule.day_of_week": %w`, err)}
		}
	}
	if v, ok := su.mutation.TimeSlot(); ok {
		if err := schedule.TimeSlotValidator(v); err != nil {
			return &ValidationError{Name: "time_slot", err: fmt.Errorf(`ent: validator failed for field "Schedule.time_slot": %w`, err)}
		}
	}
	if v, ok := su.mutation.Subject(); ok {
		if err := schedule.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Schedule.subject": %w`, err)}
		}
	}
	if su.mutation.PostCleared() && len(su.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Schedule.post"`)
	}
	return nil
}

func (su *ScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.DayOfWeek(); ok {
		_spec.SetField(schedule.FieldDayOfWeek, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDayOfWeek(); ok {
		_spec.AddField(schedule.FieldDayOfWeek, field.TypeInt, value)
	}
	if value, ok := su.mutation.TimeSlot(); ok {
		_spec.SetField(schedule.FieldTimeSlot, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTimeSlot(); ok {
		_spec.AddField(schedule.FieldTimeSlot, field.TypeInt, value)
	}
	if value, ok := su.mutation.Subject(); ok {
		_spec.SetField(schedule.FieldSubject, field.TypeString, value)
	}
	if value, ok := su.mutation.Location(); ok {
		_spec.SetField(schedule.FieldLocation, field.TypeString, value)
	}
	if su.mutation.LocationCleared() {
		_spec.ClearField(schedule.FieldLocation, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(schedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.PostTable,
			Columns: []string{schedule.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.PostTable,
			Columns: []string{schedule.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScheduleUpdateOne is the builder for updating a single Schedule entity.
type ScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleMutation
}

// SetPostID sets the "post_id" field.
func (suo *ScheduleUpdateOne) SetPostID(i int) *ScheduleUpdateOne {
	suo.mutation.SetPostID(i)
	return suo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillablePostID(i *int) *ScheduleUpdateOne {
	if i != nil {
		suo.SetPostID(*i)
	}
	return suo
}

// SetDayOfWeek sets the "day_of_week" field.
func (suo *ScheduleUpdateOne) SetDayOfWeek(i int) *ScheduleUpdateOne {
	suo.mutation.ResetDayOfWeek()
	suo.mutation.SetDayOfWeek(i)
	return suo
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDayOfWeek(i *int) *ScheduleUpdateOne {
	if i != nil {
		suo.SetDayOfWeek(*i)
	}
	return suo
}

// AddDayOfWeek adds i to the "day_of_week" field.
func (suo *ScheduleUpdateOne) AddDayOfWeek(i int) *ScheduleUpdateOne {
	suo.mutation.AddDayOfWeek(i)
	return suo
}

// SetTimeSlot sets the "time_slot" field.
func (suo *ScheduleUpdateOne) SetTimeSlot(i int) *ScheduleUpdateOne {
	suo.mutation.ResetTimeSlot()
	suo.mutation.SetTimeSlot(i)
	return suo
}

// SetNillableTimeSlot sets the "time_slot" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableTimeSlot(i *int) *ScheduleUpdateOne {
	if i != nil {
		suo.SetTimeSlot(*i)
	}
	return suo
}

// AddTimeSlot adds i to the "time_slot" field.
func (suo *ScheduleUpdateOne) AddTimeSlot(i int) *ScheduleUpdateOne {
	suo.mutation.AddTimeSlot(i)
	return suo
}

// SetSubject sets the "subject" field.
func (suo *ScheduleUpdateOne) SetSubject(s string) *ScheduleUpdateOne {
	suo.mutation.SetSubject(s)
	return suo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableSubject(s *string) *ScheduleUpdateOne {
	if s != nil {
		suo.SetSubject(*s)
	}
	return suo
}

// SetLocation sets the "location" field.
func (suo *ScheduleUpdateOne) SetLocation(s string) *ScheduleUpdateOne {
	suo.mutation.SetLocation(s)
	return suo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableLocation(s *string) *ScheduleUpdateOne {
	if s != nil {
		suo.SetLocation(*s)
	}
	return suo
}

// ClearLocation clears the value of the "location" field.
func (suo *ScheduleUpdateOne) ClearLocation() *ScheduleUpdateOne {
	suo.mutation.ClearLocation()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScheduleUpdateOne) SetUpdatedAt(t time.Time) *ScheduleUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetPost sets the "post" edge to the Post entity.
func (suo *ScheduleUpdateOne) SetPost(p *Post) *ScheduleUpdateOne {
	return suo.SetPostID(p.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (suo *ScheduleUpdateOne) Mutation() *ScheduleMutation {
	return suo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (suo *ScheduleUpdateOne) ClearPost() *ScheduleUpdateOne {
	suo.mutation.ClearPost()
	return suo
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (suo *ScheduleUpdateOne) Where(ps ...predicate.Schedule) *ScheduleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScheduleUpdateOne) Select(field string, fields ...string) *ScheduleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Schedule entity.
func (suo *ScheduleUpdateOne) Save(ctx context.Context) (*Schedule, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScheduleUpdateOne) SaveX(ctx context.Context) *Schedule {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScheduleUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := schedule.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScheduleUpdateOne) check() error {
	if v, ok := suo.mutation.DayOfWeek(); ok {
		if err := schedule.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "Schedule.day_of_week": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TimeSlot(); ok {
		if err := schedule.TimeSlotValidator(v); err != nil {
			return &ValidationError{Name: "time_slot", err: fmt.Errorf(`ent: validator failed for field "Schedule.time_slot": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Subject(); ok {
		if err := schedule.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Schedule.subject": %w`, err)}
		}
	}
	if suo.mutation.PostCleared() && len(suo.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Schedule.post"`)
	}
	return nil
}

func (suo *ScheduleUpdateOne) sqlSave(ctx context.Context) (_node *Schedule, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Schedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedule.FieldID)
		for _, f := range fields {
			if !schedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.DayOfWeek(); ok {
		_spec.SetField(schedule.FieldDayOfWeek, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDayOfWeek(); ok {
		_spec.AddField(schedule.FieldDayOfWeek, field.TypeInt, value)
	}
	if value, ok := suo.mutation.TimeSlot(); ok {
		_spec.SetField(schedule.FieldTimeSlot, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTimeSlot(); ok {
		_spec.AddField(schedule.FieldTimeSlot, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Subject(); ok {
		_spec.SetField(schedule.FieldSubject, field.TypeString, value)
	}
	if value, ok := suo.mutation.Location(); ok {
		_spec.SetField(schedule.FieldLocation, field.TypeString, value)
	}
	if suo.mutation.LocationCleared() {
		_spec.ClearField(schedule.FieldLocation, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(schedule.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.PostTable,
			Columns: []string{schedule.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   schedule.PostTable,
			Columns: []string{schedule.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Schedule{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
