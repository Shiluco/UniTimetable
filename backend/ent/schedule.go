// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Shiluco/UniTimetable/backend/ent/post"
	"github.com/Shiluco/UniTimetable/backend/ent/schedule"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"schedule_id"`
	// PostID holds the value of the "post_id" field.
	PostID int `json:"post_id,omitempty"`
	// 曜日（0:日曜日 - 6:土曜日）
	DayOfWeek int `json:"day_of_week,omitempty"`
	// 時限（1-6）
	TimeSlot int `json:"time_slot,omitempty"`
	// Name of the subject.
	Subject string `json:"subject,omitempty"`
	// Location or classroom.
	Location string `json:"location,omitempty"`
	// Record creation timestamp.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Record update timestamp.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleQuery when eager-loading is set.
	Edges          ScheduleEdges `json:"edges"`
	user_schedules *int
	selectValues   sql.SelectValues
}

// ScheduleEdges holds the relations/edges for other nodes in the graph.
type ScheduleEdges struct {
	// Post associated with the schedule.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID, schedule.FieldPostID, schedule.FieldDayOfWeek, schedule.FieldTimeSlot:
			values[i] = new(sql.NullInt64)
		case schedule.FieldSubject, schedule.FieldLocation:
			values[i] = new(sql.NullString)
		case schedule.FieldCreatedAt, schedule.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case schedule.ForeignKeys[0]: // user_schedules
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case schedule.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				s.PostID = int(value.Int64)
			}
		case schedule.FieldDayOfWeek:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day_of_week", values[i])
			} else if value.Valid {
				s.DayOfWeek = int(value.Int64)
			}
		case schedule.FieldTimeSlot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_slot", values[i])
			} else if value.Valid {
				s.TimeSlot = int(value.Int64)
			}
		case schedule.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				s.Subject = value.String
			}
		case schedule.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case schedule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case schedule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case schedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_schedules", value)
			} else if value.Valid {
				s.user_schedules = new(int)
				*s.user_schedules = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Schedule.
// This includes values selected through modifiers, order, etc.
func (s *Schedule) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the Schedule entity.
func (s *Schedule) QueryPost() *PostQuery {
	return NewScheduleClient(s.config).QueryPost(s)
}

// Update returns a builder for updating this Schedule.
// Note that you need to call Schedule.Unwrap() before calling this method if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return NewScheduleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Schedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Schedule is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PostID))
	builder.WriteString(", ")
	builder.WriteString("day_of_week=")
	builder.WriteString(fmt.Sprintf("%v", s.DayOfWeek))
	builder.WriteString(", ")
	builder.WriteString("time_slot=")
	builder.WriteString(fmt.Sprintf("%v", s.TimeSlot))
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(s.Subject)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule
