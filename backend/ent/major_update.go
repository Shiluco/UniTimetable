// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Shiluco/UniTimetable/backend/ent/department"
	"github.com/Shiluco/UniTimetable/backend/ent/major"
	"github.com/Shiluco/UniTimetable/backend/ent/predicate"
	"github.com/Shiluco/UniTimetable/backend/ent/user"
)

// MajorUpdate is the builder for updating Major entities.
type MajorUpdate struct {
	config
	hooks    []Hook
	mutation *MajorMutation
}

// Where appends a list predicates to the MajorUpdate builder.
func (mu *MajorUpdate) Where(ps ...predicate.Major) *MajorUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetDepartmentID sets the "department_id" field.
func (mu *MajorUpdate) SetDepartmentID(i int) *MajorUpdate {
	mu.mutation.SetDepartmentID(i)
	return mu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (mu *MajorUpdate) SetNillableDepartmentID(i *int) *MajorUpdate {
	if i != nil {
		mu.SetDepartmentID(*i)
	}
	return mu
}

// SetName sets the "name" field.
func (mu *MajorUpdate) SetName(s string) *MajorUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MajorUpdate) SetNillableName(s *string) *MajorUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetDepartment sets the "department" edge to the Department entity.
func (mu *MajorUpdate) SetDepartment(d *Department) *MajorUpdate {
	return mu.SetDepartmentID(d.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (mu *MajorUpdate) AddUserIDs(ids ...int) *MajorUpdate {
	mu.mutation.AddUserIDs(ids...)
	return mu
}

// AddUsers adds the "users" edges to the User entity.
func (mu *MajorUpdate) AddUsers(u ...*User) *MajorUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (mu *MajorUpdate) Mutation() *MajorMutation {
	return mu.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (mu *MajorUpdate) ClearDepartment() *MajorUpdate {
	mu.mutation.ClearDepartment()
	return mu
}

// ClearUsers clears all "users" edges to the User entity.
func (mu *MajorUpdate) ClearUsers() *MajorUpdate {
	mu.mutation.ClearUsers()
	return mu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (mu *MajorUpdate) RemoveUserIDs(ids ...int) *MajorUpdate {
	mu.mutation.RemoveUserIDs(ids...)
	return mu
}

// RemoveUsers removes "users" edges to User entities.
func (mu *MajorUpdate) RemoveUsers(u ...*User) *MajorUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MajorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MajorUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MajorUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MajorUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MajorUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := major.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Major.name": %w`, err)}
		}
	}
	if mu.mutation.DepartmentCleared() && len(mu.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Major.department"`)
	}
	return nil
}

func (mu *MajorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(major.Table, major.Columns, sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(major.FieldName, field.TypeString, value)
	}
	if mu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.UsersTable,
			Columns: []string{major.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.UsersTable,
			Columns: []string{major.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.UsersTable,
			Columns: []string{major.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{major.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MajorUpdateOne is the builder for updating a single Major entity.
type MajorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MajorMutation
}

// SetDepartmentID sets the "department_id" field.
func (muo *MajorUpdateOne) SetDepartmentID(i int) *MajorUpdateOne {
	muo.mutation.SetDepartmentID(i)
	return muo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableDepartmentID(i *int) *MajorUpdateOne {
	if i != nil {
		muo.SetDepartmentID(*i)
	}
	return muo
}

// SetName sets the "name" field.
func (muo *MajorUpdateOne) SetName(s string) *MajorUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableName(s *string) *MajorUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetDepartment sets the "department" edge to the Department entity.
func (muo *MajorUpdateOne) SetDepartment(d *Department) *MajorUpdateOne {
	return muo.SetDepartmentID(d.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (muo *MajorUpdateOne) AddUserIDs(ids ...int) *MajorUpdateOne {
	muo.mutation.AddUserIDs(ids...)
	return muo
}

// AddUsers adds the "users" edges to the User entity.
func (muo *MajorUpdateOne) AddUsers(u ...*User) *MajorUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (muo *MajorUpdateOne) Mutation() *MajorMutation {
	return muo.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (muo *MajorUpdateOne) ClearDepartment() *MajorUpdateOne {
	muo.mutation.ClearDepartment()
	return muo
}

// ClearUsers clears all "users" edges to the User entity.
func (muo *MajorUpdateOne) ClearUsers() *MajorUpdateOne {
	muo.mutation.ClearUsers()
	return muo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (muo *MajorUpdateOne) RemoveUserIDs(ids ...int) *MajorUpdateOne {
	muo.mutation.RemoveUserIDs(ids...)
	return muo
}

// RemoveUsers removes "users" edges to User entities.
func (muo *MajorUpdateOne) RemoveUsers(u ...*User) *MajorUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the MajorUpdate builder.
func (muo *MajorUpdateOne) Where(ps ...predicate.Major) *MajorUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MajorUpdateOne) Select(field string, fields ...string) *MajorUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Major entity.
func (muo *MajorUpdateOne) Save(ctx context.Context) (*Major, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MajorUpdateOne) SaveX(ctx context.Context) *Major {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MajorUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MajorUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MajorUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := major.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Major.name": %w`, err)}
		}
	}
	if muo.mutation.DepartmentCleared() && len(muo.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Major.department"`)
	}
	return nil
}

func (muo *MajorUpdateOne) sqlSave(ctx context.Context) (_node *Major, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(major.Table, major.Columns, sqlgraph.NewFieldSpec(major.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Major.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, major.FieldID)
		for _, f := range fields {
			if !major.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != major.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(major.FieldName, field.TypeString, value)
	}
	if muo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.DepartmentTable,
			Columns: []string{major.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.UsersTable,
			Columns: []string{major.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.UsersTable,
			Columns: []string{major.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.UsersTable,
			Columns: []string{major.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Major{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{major.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
